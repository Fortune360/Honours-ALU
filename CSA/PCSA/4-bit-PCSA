----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.all;


entity PARTIAL_CARRY_SKIP_ADDER is
	Generic (
					N	: integer := 4						-- 4-bit block size.
		);
	Port ( 	INP_A : in signed(N-1 downto 0);
				INP_B	: in signed(N-1 downto 0);
				C_IN 	: in std_logic;
				SUM 	: out signed(N-1 downto 0);
				C_OUT : out std_logic
		);
end PARTIAL_CARRY_SKIP_ADDER;

architecture Behavioral of PARTIAL_CARRY_SKIP_ADDER is

	component PARTIAL_RIPPLE_CARRY
		Generic (
						N	: integer := 4 				-- 4-bit block size.
			);
		Port ( 	INP_A : in signed(N-1 downto 0);
					INP_B	: in signed(N-1 downto 0);
					C_IN 	: in std_logic;
					SUM 	: out signed(N-1 downto 0);
					PRO	: out signed(N-1 downto 0);
					C_OUT : out std_logic
			);
	end component;
	
	-- The four propagated values, output from the Partial Ripple Carry Adder
	constant SIZE	: integer := 8;
	signal P_OUT 	: signed((SIZE/2)-1 downto 0);
	signal C1		: std_logic;						-- The Carry out of the Partial Ripple Carry Adder
--	signal TEMP  	: std_logic;	
--	signal TEMP1 	: std_logic;	
	
begin

	PCSA: PARTIAL_RIPPLE_CARRY PORT MAP(INP_A, INP_B, C_IN, SUM, P_OUT, C1);

--	process(P_OUT, C_IN, C1) begin
--		TEMP <= (P_OUT(0) AND P_OUT(1) AND P_OUT(2) AND P_OUT(3));
--		TEMP1 <= TEMP AND C_IN;
--		C_OUT <= TEMP1 AND C1;
--	end process;
	C_OUT <= ((P_OUT(0) AND P_OUT(1) AND P_OUT(2) AND P_OUT(3)) AND C_IN) OR C1;
	
end Behavioral;

